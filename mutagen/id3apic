#!/usr/bin/python
# manipulate ID3 APIC tags
# Copyright 2005 Joe Wreschnig
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# $Id: id3.py 1435 2005-07-26 03:34:25Z mu $

# TODO:
#  * Finish all the described commands
#  * GTK+ UI

import os, sys
import mutagen.id3

KINDS = ["other", "fileicon", "othericon", "frontcover", "backcover",
         "leaflet", "media", "leadartist", "artist", "conductor",
         "band", "composer", "lyricist", "location", "recording",
         "performance", "screencap", "fish", "illustration",
         "bandlogo", "publisherlogo"]

HKINDS = ["Other", "32x32 pixels 'file icon'", "Other file icon",
          "Cover (front)", "Cover (back)", "Leaflet page",
          "Media (e.g. label side of CD)",
          "Lead artist/lead performer/soloist", "Artist/performer",
          "Conductor", "Band/Orchestra", "Composer", "Lyricist/text writer",
          "Recording Location", "During recording", "During performance",
          "Movie/video screen capture", "A bright coloured fish",
          "Illustration", "Band/artist logotype", "Publisher/studio logotype"
          ]

def list_images():
    for filename in sys.argv:
        try: id3 = mutagen.id3.ID3(filename)
        except (IOError, mutagen.id3.error), err: print "E: %s" % str(err)
        else:
            frames = id3.getall("APIC")
            if frames:
                print "Attached pictures in %s:" % filename
                for frame in frames:
                    try: kind = HKINDS[frame.type]
                    except IndexError: kind = "Invalid picture type"
                    if frame.mime == "-->": data = frame.data
                    else: data = "%d bytes" % len(frame.data)
                    desc = frame.desc.strip() or "No description"
                    print " %s (%s %s): %s" % (kind, frame.mime, data, desc)
            else:
                print "%s: No attached picture frames." % filename
        print

def extract_images():
    from md5 import md5 # filename is determined by description

    if sys.argv[0] == "-p":
        sys.argv.pop(0)
        prefix = sys.argv.pop(0)
    else: prefix = "apic-"

    for filename in sys.argv:
        try: id3 = mutagen.id3.ID3(filename)
        except (IOError, mutagen.id3.error), err: print "E: %s" % str(err)
        else:
            for frame in id3.getall("APIC"):
                if not frame.data.strip(): continue

                try: outfn = prefix + KINDS[frame.type] + "-"
                except IndexError: outfn = "unknown-"
                outfn += md5(frame.desc).hexdigest()[::4]
                if "jpeg" in frame.mime or 'jpg' in frame.mime: outfn += '.jpg'
                elif "png" in frame.mime: outfn += '.png'
                elif 'gif' in frame.mime: outfn += '.gif'
                else: outfn += '.apic'

                print ("Extracting %s ..." % outfn),
                
                f = file(outfn, "w")
                f.write(frame.data)
                f.close()

                print "Done."
                
def print_help(exit=False):
    print """\
Usage: %s command [options] filename.mp3 ...

Commands:
    add - Add an image to the file (requires -k)
    delete - Delete all (or one kind) of pictures from the file
    extract - Extract images from the file
    list  - List all pictures in the file

Options:
    -k - specify the kind of image (see below)
    -p - prefix for extraction

Kinds of Images:
  %s
""" % (sys.argv[0], " ".join(KINDS))
    raise SystemExit(exit)

COMMANDS = dict(list=list_images, extract=extract_images)

if __name__ == "__main__":
    if len(sys.argv) < 2: print_help(True)
    sys.argv.pop(0)
    if sys.argv[0] in COMMANDS: COMMANDS[sys.argv.pop(0)]()
    else:
        print "E: Invalid command: %s" % sys.argv[0]
        print_help(True)
